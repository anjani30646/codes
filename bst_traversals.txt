
Sample Input 0

10
12 3 5 11 15 5 4 4 8 15 
Sample Output 0

12 3 5 5 4 4 11 8 15 15 
3 4 4 5 5 8 11 12 15 15 
4 4 5 8 11 5 3 15 15 12 


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

struct node
{
    int data;
    struct node* l;
    struct node* r;
};

struct node* newnode(int val)
{
    struct node* node = (struct node*)malloc(sizeof(struct node));
    node->data=val;
    node->l=NULL;
    node->r=NULL;
    return node;
}

struct node* insert(struct node* node,int val)
{
    if(node==NULL)
        return newnode(val);
    if(val<=node->data)
         node->l=insert(node->l,val);
    else
         node->r=insert(node->r,val);
  return node;
}

void preorder(struct node* root)
{
  if(root!=NULL){
       printf("%d ",root->data);
      preorder(root->l);
      preorder(root->r);
  }
}

void inorder(struct node* root)
{
  if(root!=NULL){
      inorder(root->l);
    printf("%d ",root->data);
      inorder(root->r);
  }
}

void postorder(struct node* root)
{
  if(root!=NULL){
       
      postorder(root->l);
      postorder(root->r);
      printf("%d ",root->data);
  }
}

int main() 
{
    struct node* root=NULL;
    int val,n;
    cin >> n;
    for(int i=0;i<n;i++)
    {
        cin >> val;
        root=insert(root,val);
    }
    preorder(root);
    printf("\n");
    inorder(root);
    printf("\n");
    postorder(root);
    return 0;
}
